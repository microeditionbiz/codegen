//
//  main.swift
//  File-Input-Codegenerator
//
//  Created by Pablo Ezequiel Romero Giovannoni on 08/08/2022.
//

import Foundation
import ArgumentParser
import Generator

struct Generate: ParsableCommand {
//    It's a bool flag
    @Flag(help: "Include a counter with each repetition.")
    var includeCounter = false

//    Passed as --count or -c in any order
    @Option(name: .shortAndLong, help: "The number of times to repeat 'phrase'.")
    var count: Int?

//    Passed without arguments
    @Argument(help: "The phrase to repeat.")
    var phrase: String

    mutating func run() throws {
        let configuration: Configuration = .init(
            basePrefixName: "Sentence",
            servicesPrefixName: ["Sentence"],
            mobilePresentationInterface: .init(
                viewModelPrefixName: "Sentence",
                viewModelType: .struct,
                updateValues: ["viewModel"],
                actionValues: ["dismiss"],
                scenePrefixName: "Sentence",
                presenterPrefixName: "Sentence"
            ),
            presentation: .init(
                scenePrefixName: "Sentence",
                presenterPrefixName: "Sentence"
            ),
            mobileUI: .init(
                observableObjectPrefixName: "Sentence",
                viewPrefixName: "Sentence",
                viewIncludesPreview: true
            ),
            mobileUITestHarnes: .init(
                fakePresenterPrefixName: "Sentence",
                sceneConfigurationPrefixName: "Sentence"
            )
        )

        let generator = Generator(
            templatesPath: ["templates/"])

        try! generator.run(
            configuration: configuration,
            templateName: "template.stencil",
            outputPath: "AutoGenerated.swift"
        )
    }
}

Generate.main()
