//
//  main.swift
//  File-Input-Codegenerator
//
//  Created by Pablo Ezequiel Romero Giovannoni on 08/08/2022.
//

import Foundation
import ArgumentParser
import Generator

//$ <command> -i sentence.yml -t templates/template.stencil -o Autogenerated.swift
struct Generate: ParsableCommand {
    // Passed as --input or -i in any order
    @Option(name: .shortAndLong, help: "The input YAML file path used as Context.")
    var input: String

    // Passed as --template or -t in any order
    @Option(name: .shortAndLong, help: "The Stencil template file path.")
    var template: String

    // Passed as --output or -o in any order
    @Option(name: .shortAndLong, help: "The output autogenerated file path.")
    var output: String

    mutating func run() throws {
//        let configuration: Configuration = .init(
//            basePrefixName: "Sentence",
//            servicesPrefixName: ["Sentence"],
//            mobilePresentationInterface: .init(
//                viewModelPrefixName: "Sentence",
//                viewModelType: .struct,
//                updateValues: ["viewModel"],
//                actionValues: ["dismiss"],
//                scenePrefixName: "Sentence",
//                presenterPrefixName: "Sentence"
//            ),
//            presentation: .init(
//                scenePrefixName: "Sentence",
//                presenterPrefixName: "Sentence"
//            ),
//            mobileUI: .init(
//                observableObjectPrefixName: "Sentence",
//                viewPrefixName: "Sentence",
//                viewIncludesPreview: true
//            ),
//            mobileUITestHarnes: .init(
//                fakePresenterPrefixName: "Sentence",
//                sceneConfigurationPrefixName: "Sentence"
//            )
//        )

        let generator = Generator(templatesPath: [""])

        do {
            try generator.run(
                inputFile: input,
                templateFile: template,
                outputFile: output
            )
        } catch {
            print("Error running generator:", error)
        }
    }
}

Generate.main()
