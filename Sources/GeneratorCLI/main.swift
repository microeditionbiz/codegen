//
//  main.swift
//  File-Input-Codegenerator
//
//  Created by Pablo Ezequiel Romero Giovannoni on 08/08/2022.
//

import Foundation
import ArgumentParser
import Generator

//$ <command> -i sentence.yml -t templates/template.stencil -o Autogenerated.swift
struct Codegen: ParsableCommand {
    // Passed as --input or -i in any order
    @Option(name: .shortAndLong, help: "The input file path used as Context. It has to include a yml, json or plist extension.")
    var input: String

    // Passed as --template or -t in any order
    @Option(name: .shortAndLong, help: "The Stencil template file path.")
    var template: String

    // Passed as --output or -o in any order
    @Option(name: .shortAndLong, help: "The output autogenerated file path.")
    var output: String?

    // Passed as --override
    @Flag(help: "It will override existing files.")
    var override = false

    func run() {
        do {
            let startDate = Date()
            let generatorInput = try generatorInput(from: input)
            let generator = Generator(templatesPath: [""])

            let generatedFiles = try generator.run(
                input: generatorInput,
                templateFile: template,
                output: output,
                override: override
            )

            print(createOutput(for: generatedFiles, startedAt: startDate))
        } catch {
            print(createOutput(for: error))
        }
    }

    private func createOutput(for files: [String], startedAt date: Date) -> String {
        let count = files.count

        return .init(
            format: "\nGenerated %d file%@ in %.4f seconds ðŸš€\n\n%@\n",
            count,
            count == 1 ? "" : "s",
            Date().timeIntervalSince(date),
            files.map { "- " + $0 }.joined(separator: "\n")
        )
    }

    private func createOutput(for error: Error) -> String {
        .init(
            format:"\nError running generator ðŸ˜©\n\n%@\n",
            error.localizedDescription
        )
    }
}

Codegen.main()
