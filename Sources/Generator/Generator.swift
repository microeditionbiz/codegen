//
//  Generator.swift
//
//
//  Created by Pablo Ezequiel Romero Giovannoni on 09/09/2022.
//

import Foundation
import StencilSwiftKit
import Stencil
import PathKit


public struct Generator {
    public static let defaultAutogenerateFilename = "autogenerated"
    private let environment: Environment
    private let contentWritter: ContentWritter

    public init(templatesPath: [String], contentWritter: ContentWritter = DefaultContentWritter.init()) {
        var environment = stencilSwiftEnvironment()
        environment.loader = FileSystemLoader(paths: templatesPath.map { Path.init($0) })
        self.environment = environment
        self.contentWritter = contentWritter
    }

    @discardableResult
    public func run(
        input: GeneratorInput,
        templateFile: String,
        output: String?,
        override: Bool
    ) throws -> [String] {
        try run(
            context: try input.buildContext(),
            templateFile: templateFile,
            output: output,
            override: override
        )
    }

    private func run(
        context: [String: Any],
        templateFile: String,
        output: String?,
        override: Bool
    ) throws -> [String] {
        let rendered = try environment.renderTemplate(
            name: templateFile,
            context: context
        )

        let files = try FileAnnotatedContent.process(content: rendered)
            .appendRootDirectory(output)

        if files.isEmpty {
            let file = output ?? Self.defaultAutogenerateFilename
            try contentWritter.save(
                content: rendered,
                at: file,
                override: override
            )
            return [file]
        } else {
            try files.forEach { (content, path) in
                try contentWritter.save(
                    content: content,
                    at: path,
                    override: override
                )
            }

            return files.map(\.path)
        }
    }

}
