//
//  File.swift
//  
//
//  Created by Pablo Ezequiel Romero Giovannoni on 19/09/2022.
//

import Foundation
import Stencil

extension ContentWritterError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case let .pathExist(path):
            return "File at location \(path) already exist. Use --override param in case that you want to override autogenerated files."
        }
    }
}

extension FileAnnotatedContentError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .invalidFormat:
            return "Invalid file annotated format."
        case .mislocatedEndAnnotation:
            return "The position of the file end annotation is not valid."
        }
    }
}

extension GeneratorInputError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case let .missingExtension(url):
            return "The file at \(url) doesn't contain an extension. You have to set .yml, .json or .plist."
        case let .unsupportedExtension(pathExtension):
            return "The extension \(pathExtension) is not supported."
        case let .invalidInputFileContent(url):
            return "The content of the file at \(url) is not valid."
        case let .invalidInputFormat(content):
            return "The format of the input is not valid: \(content)."
        }
    }
}

extension Stencil.TemplateDoesNotExist: LocalizedError {
    public var errorDescription: String? {
        description
    }
}

private final class StencilErrorReporter {
    static func renderError(_ error: Error) -> String {
        guard let templateError = error as? TemplateSyntaxError else { return error.localizedDescription }
        
        func describe(token: Token) -> String {
            let templateName = token.sourceMap.filename ?? ""
            let location = token.sourceMap.location
            let highlight = """
        \(String(Array(repeating: " ", count: location.lineOffset)))\
        ^\(String(Array(repeating: "~", count: max(token.contents.count - 1, 0))))
        """
            
            return """
        \(templateName)\(location.lineNumber):\(location.lineOffset): error: \(templateError.reason)
        \(location.content)
        \(highlight)
        """
        }
        
        var descriptions = templateError.stackTrace.reduce(into: []) { $0.append(describe(token: $1)) }
        let description = templateError.token.map(describe(token:)) ?? templateError.reason
        descriptions.append(description)
        return descriptions.joined(separator: "\n")
    }
}

extension Stencil.TemplateSyntaxError: LocalizedError {
    public var errorDescription: String? {
        StencilErrorReporter.renderError(self)
    }
}
